#!/usr/bin/env python
#
# Requirement Management Toolset
#
# (c) 2010 by flonatel
#
# For licencing details see COPYING
#

import sys
import git
from optparse import OptionParser
from rmtoo.lib.RequirementSet import RequirementSet
from rmtoo.lib.ReqsContinuum import ReqsContinuum
from rmtoo.lib.Modules import Modules
from rmtoo.lib.RMTException import RMTException
from rmtoo.lib.TopicHandler import TopicHandler
from rmtoo.lib.OutputHandler import OutputHandler

def parse_cmd_line_opts():
    parser = OptionParser()
    parser.add_option("-d", "--directory", dest="directory",
                  help="Directory with requirements")
    parser.add_option("-f", "--file-config", dest="config_file",
                  help="Config file")
    parser.add_option("-m", "--modules-directory", dest="modules_directory",
                  help="Directory with modules")
    parser.add_option("-c", "--create-makefile-dependencies",
                      dest="create_makefile_dependencies",
                      help="Create makefile dependencies")
    # This is added for compatibility reasons for version 6 and before. 
    parser.add_option("-o", "--dot-ouput", dest="dot_output",
                  help="File where the dot output is stored "
                      "(depricated: use config file instead)")
    parser.add_option("-p", "--prios-ouput", dest="prios_output",
                  help="File where the prios output is stored "
                      "(depricated: use config file instead)")
    parser.add_option("-l", "--latex-directory", dest="latex_directory",
                  help="Directory where to put LaTeX output "
                      "(depricated: use config file instead)")

    (options, args) = parser.parse_args()

    if options.directory==None:
        print("+++ ERROR: no directory option is specified")
        sys.exit(1)

    if options.modules_directory==None:
        # If there is no modules directory given, use the pycentral one.
        options.modules_directory = "/usr/share/pyshared"

    if options.config_file==None:
        print("+++ ERROR: no config_file option is specified")
        sys.exit(1)

    if len(args)>=1:
        options.base_version = args[0]
    else:
        # If nothing is given 'FILES' is assumed.
        options.base_version = "FILES"

    if len(args)>2:
        print("+++ ERROR: too many args")
        sys.exit(1)

    return options

def execute_cmds(opts, config, mods):
    # Checks are allways done - to be sure that e.g. the dependencies
    # are correct.
    try:
        rc = ReqsContinuum(opts.directory, mods, opts, config)
        reqs = rc.base_requirement_set
    except git.errors.GitCommandError, gce:
        print("+++ ERROR: Problem accessing git tree: '%s'" % gce)
        print("    Is the given version correct?");
        return

    # Setup the OutputHandler
    # Note: this can be more than one!
    # For the topic based output also all the Topics are needed -
    # before the OutputHandler itself - because different output
    # handler may reference the same Topic.
    topics = TopicHandler(config)
    topics.depict(reqs)
    ohandler = OutputHandler(config, topics)

    # When only the dependencies are needed, output them to the given
    # file. 
    if opts.create_makefile_dependencies!=None:
        ofile = file(opts.create_makefile_dependencies, "w")
        # Write out the REQS=
        rc.cmad_write_reqs_list(ofile)
        # Write out the rest
        ohandler.create_makefile_dependencies(ofile, rc)
        ofile.close()
        return

    # Output everything
    ohandler.output(rc)

def load_config(opts):
    # Load config file
    # ('execfile' does not work here.)
    f = file(opts.config_file, "r")
    conf_file = f.read()
    exec(conf_file)
    config = Config()
    f.close()
    return config

def compat_old_clp(opts, config):
    # When the old '-o' was given, insert this into the config section.
    if opts.dot_output!=None:
        if "graph" in config.output_specs:
            raise RMTException(32, "Double specified: dot output "
                               "is given in the config file as well as on "
                               "the command line - please use just one")
        # print("+++ WARNING: '-o' is depricated and will vanish in "
        #       "             one of the next releases")
        config.output_specs["graph"] = [opts.dot_output]

    # Same for '-p' but for the priority output.
    if opts.prios_output!=None:
        if "prios" in config.output_specs:
            raise RMTException(33, "Double specified: prios output "
                               "is given in the config file as well as on "
                               "the command line - please use just one")
        # print("+++ WARNING: '-p' is depricated and will vanish in "
        #       "             one of the next releases")
        config.output_specs["prios"] = [opts.prios_output]

    # Same for '-l' but for the latex output.
    if opts.latex_directory!=None:
        if "latex" in config.output_specs:
            raise RMTException(34, "Double specified: latex output "
                               "is given in the config file as well as on "
                               "the command line - please use just one")
        # print("+++ WARNING: '-l' is depricated and will vanish in "
        #       "             one of the next releases")
        config.output_specs["latex"] = [opts.latex_directory]

def main():
    opts = parse_cmd_line_opts()
    config = load_config(opts)

    # For a limited time only (nobody knows when this will end)
    # re-insert the old '-p' and '-o' options - as a user needs this.
    compat_old_clp(opts, config)

    mods = Modules(opts.modules_directory, opts, config)
    execute_cmds(opts, config, mods)

if __name__=="__main__":
    try:
        main()
    except RMTException, rmte:
        print("+++ ERROR: Exception occured: %s" % rmte)
        sys.exit(1)
