.\" 
.\" Man page for whole package rmtoo
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 3 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" (c) 2010 by flonatel (sf@flonatel.org)
.\"
.TH rmtoo 7 2010-08-15 "User Commands" "Requirements Management"
.SH NAME
rmtoo \- requirements management tool
.SH DESCRIPTION
The
.B rmtoo
package is used to work on a set of requirements and create artifacts
from them.
.SH IDEA
.B rmtoo
uses a different approach than most other requirements management
tools: it comes as a command line tool optimized for handling of 
requirements.  The power of
.B rmtoo
is that a typical development environment can perfectly handle the
input files as they are plain text files.  
.P
.B rmtoo
input files can ba handled by mostly all standard *nix standard
commands like grep(1), awk(1) or sed(1).  For replacing text commands
like streplace(1) can be used.
.P
.B rmtoo
is a tool. It helps everybody who understands Requirements Management.  It
does not render anybody directly into an Requirements Management
expert.  You have to know what you are doing!
.P
.B rmtoo
gives everybody the unique chance to adapt the tools to their needs
and their processes: it's open source.  Sometimes some other tools
force the user to change you habit or processes.  With
.B rmtoo
the user has the control.
.P
The output of requirements is handled based on groups of
requirements - so called Topics.  Each requirement belongs to
exactly one topic.  Typically a Topic corresponds to one section; a 
Topic can have sub-Topic (sub-sections).  For further information
please consult the section
.B TOPIC
.P
For handling history and baselines an arbitrary revision control
system can be used (like git, mercurial, subversion, ...).
Nevertheless currently
.B rmtoo
supports \fIgit\fR natively for version access and statistics.
.P
.B Let one thing do one thing.
.P
.B rmtoo
is
.B no
integrated 'do-everything' tool as it comes with no GUI at all.
.SH OVERVIEW
The
.B rmtoo
requirement management tool works on a set of requirements.  It reads
them in, parses them, preprocesses them, checks for syntactic and
semantic problems.  If there is no error found, all artifacts which
are specified are outputted. 
.P
This page is an overview page.  It gives a short overview over the
.B rmtoo 
usage.  Also it points to other man pages where information about
input and output files can be found.
.SH INTRODUCTION
The
.B rmtoo
reads in a set of input files: requirements and topics.
.P
These files are plain text files stored in the file system.
.B rmtoo
parses these files and runs some checks on them.  These
checks include syntax checks, semantic checks and some heuristics to
get hints for increasing the quality of the requirements.
.P
After passing these checks,
.B rmtoo
outputs all configured artifacts, like PDF or HTML documents,
dependency graph or statistics.
.SH TOPIC
.B rmtoo
uses a unique way of describing and handling output: so called
.B topics.
A topic is a description of one set of related requirements.  It has a
name and contains text, requirements and other topics.  With topics it
is possible to build hierarchy output document structures.  In a PDF
file a topic may be one chapter which includes other topics which are
handled as e.g. sections.  Using HTML output, each topic corresponds
to one HTML page, while a subtopic is a link to the appropriate
(sub-)topics HTML page representation.  When using graph output the
requirements of a topic are clustered.
.P
This makes it possible to define the output structure once (in so
called topic files) and use this structure over and over for all
different output artifacts.
.P
It is possible (by adding one additional line in the configuration
file) to create an independent and a self-contained (set of)
document(s) from an arbitrary sub-topic.  This makes it possible
e.g. to create a own document for the marketing department which is
not interested in technical decisions and security requirements.
.P
Of course it is also possible to map one set of requirements to some
completely different sets of topics.  This makes it possible to have
one set of requirements for the internal used project documentation
and for an external company which delivers only one small part of the
whole project.
.SH "SEE ALSO"
.B rmtoo-invoking(1)
- overview over command line parameters executable for requirement mangement
.P
.B rmtoo-req-format(5)
- format description for the requirement files
.P
.B rmtoo-topic-format(5)
- format description for the topic files
.P
.B rmtoo-config(5)
- description of the \fIConfig.py\fR file which is needed for 
.B rmtoo
environment definition and output specification.
.P
.B rmtoo-analytics(7)
- general concept of handling analytics on requirements
.P
.B rmtoo-analytics-descwords(7)
- heuristic for word evaluation in the requirement description
.P
.B rmtoo-analytics-hotspot(7)
- check incoming and outgoing links
.P
.B rmtoo-analytics-topic-coherence(7)
- check topic in-link against out-link numbers
.P
.B rmtoo-analytics-req-topic-coherence(7)
- check topic of a requirement for in-link against out-link numbers
.P
.B rmtoo-art-req-dep-graph(1)
- output description of the requirement dependency graph
.P
.B rmtoo-art-req-dep-graph2(1)
- output description of the requirement dependency graph - version 2
.P
.B rmtoo-art-html(1)
- html artifact output
.P
.B rmtoo-art-latex2(1)
- output description for LaTeX output of all requirements
.P
.B rmtoo-art-oopricing(1)
- output description for ODF commercial price bidding
.P
.B rmtoo-art-prio-lists(1)
- output description for the backlog and list of requirements for
elaboration. 
.P
.B rmtoo-art-reqs-history-cnt(1)
- output description of the requirement history count.
.P
.B rmtoo-pricing-graph(1)
- creates graph from pricing
.P
.B rmtoo-emacs-mode-req(7)
- major mode for Emacs for writing requirements
.P 
.B All the following man pages referenced in this section do not yet exist.  
.B They will be written in future.
.P
.B rmtoo-art-xml-ganttproject1(1)
- [depricated] output requirements as project plan for ganttproject
version 1.
.P
.B rmtoo-art-xml-ganttproject2(1)
- output requirements as project plan for ganttproject version 2.
.P
.B rmtoo-art-xml1(1)
- output requirements as xml - version 1.
.SH AUTHOR
Written by Andreas Florath (sf@flonatel.org)
.SH COPYRIGHT
Copyright \(co 2010 by flonatel (sf@flonatel.org).
License GPLv3+: GNU GPL version 3 or later
